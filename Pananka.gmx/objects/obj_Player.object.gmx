<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oBlock</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT PLAYER

event_inherited();

selector = instance_create(x,y,obj_Selector);
selector.player = self.id; // this player

sprite_index = SKIN_DEFAULT;
neighbour = -1;
MAX_SPEED = 32;
actionSpeed = 24 * 2;

enum playerstate {
    STATIC, 
    MOVING, 
    FALLING,
    ACTION
    }
state = playerstate.STATIC;

enum directionEnum {
    XX,
    YY,
    NONE
}
dir = directionEnum.NONE;
sig = 0;

goFit = false;
backSpeed = 12;
countStep = 0;

/* temp coordenates */

mouse_previous_x = -1;
mouse_previous_y = -1;

dist_pos_x = -1;
dist_pos_y = -1;

last_fit_x = x;
last_fit_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Selector
/*
 * Destroy selector with the player
 */
with selector { instance_destroy(); }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Static
state = playerstate.STATIC;
dir = directionEnum.NONE;
show_debug_message("O player est√° em modo STATIC.");

if (!global.hasBlocksSameColor) {
    global.mouseActive = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Heritage
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fit Automatically
if (goFit) {
    if (dir == directionEnum.YY) {
        if (last_fit_y &gt; y) {
            if (abs(y - last_fit_y) &lt; backSpeed) {
                y = last_fit_y;
            } else {
                y += backSpeed;
            }
        }
        else if (last_fit_y &lt; y){
            if (abs(y - last_fit_y) &lt; backSpeed) {
                y = last_fit_y;
            } else {
                y -= backSpeed;
            }
        }
        
    }
    else if (dir == directionEnum.XX) {
        if (last_fit_x &gt; x) {
            if (abs(x - last_fit_x) &lt; backSpeed) {
                x = last_fit_x;
            } else {
                x += backSpeed;
            }
        }
        else if (last_fit_x &lt; x){
            if (abs(x - last_fit_x) &lt; backSpeed) {
                x = last_fit_x;
            } else {
                x -= backSpeed;
            }
        }
        
    }
    /*else {
        y = last_fit_y;
        x = last_fit_x;
    }*/
    
    if (last_fit_y == y and last_fit_x == x) {
        show_debug_message("Parou o fit do player e vai mudar o seu estado para STATIC.");
        goFit = false;
        alarm[0] = 5;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy test
if autoDestroy {
    image_alpha = 0.5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop
if state == playerstate.STATIC 
{
    neighbour = noone;
    dir = directionEnum.NONE;
    mouse_previous_x = -1;
    mouse_previous_y = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>state == playerstate.ACTION</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if dir == directionEnum.YY {
    if (dist_pos_y &gt; y) {
        if (abs(y - dist_pos_y) &lt;= actionSpeed) {
            y = dist_pos_y;
        } else {
            y += actionSpeed;
        }
    }
    else if (dist_pos_y &lt; y) {
        if (abs(y - dist_pos_y) &lt;= actionSpeed) {
            y = dist_pos_y;
        } else {
            y -= actionSpeed;
        }
    }
    
}
else if dir == directionEnum.XX {
    if (dist_pos_x &gt; x) {
        if (abs(x - dist_pos_x) &lt;= actionSpeed) {
            x = dist_pos_x;
        } else {
            x += actionSpeed;
        }
    }
    else if (dist_pos_x &lt; x) {
        if (abs(x - dist_pos_x) &lt;= actionSpeed) {
            x = dist_pos_x;
        } else {
            x -= actionSpeed;
        }
    }
    
}

/*
show_debug_message("x = " + string(x));
show_debug_message("dist_pos_x = " + string(dist_pos_x));
show_debug_message("y = " + string(y));
show_debug_message("dist_pos_y = " + string(dist_pos_y));
*/
if (dist_pos_y == y and dist_pos_x == x) {
/*
    show_debug_message("=========================================");
    show_debug_message("VAI MUDAR PARA STATIC DEPOIS DO ACTION!!!");
    show_debug_message("=========================================");
    */
    dir = directionEnum.NONE;
    state = playerstate.STATIC;
    dist_pos_x = -1;
    dist_pos_y = -1;
    alarm[0] = 5; // restart state and activate mouse
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Last Fit 

/**
 * Assert last fit coordenates to a position multiple of 96 
 * where the player can fit (the last where he passed)
 */
if x &gt;= last_fit_x + self.sprite_width {
    last_fit_x += self.sprite_width;
    global.checkupOnRoomSprites = true;
    }
if x &lt;= last_fit_x - self.sprite_width {
    last_fit_x -= self.sprite_width;
    global.checkupOnRoomSprites = true;
    }
if y &gt;= last_fit_y + self.sprite_height {
    last_fit_y += self.sprite_height;
    global.checkupOnRoomSprites = true;
    }
if y &lt;= last_fit_y - self.sprite_height {
    last_fit_y -= self.sprite_height;
    global.checkupOnRoomSprites = true;
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go Fit
if state == playerstate.MOVING {
    global.mouseActive = false;
    goFit = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.mouseActive</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
if state == playerstate.MOVING &amp;&amp; dir == directionEnum.NONE {
    if (mouse_previous_x != mouse_x or mouse_previous_y != mouse_y) {
        // see which direction
        diff_x = mouse_x - mouse_previous_x;
        diff_y = mouse_y - mouse_previous_y;
        
        if abs(diff_y) &gt; abs(diff_x) {
            neighbour = instance_position(self.x, self.y + sign(diff_y)*(self.sprite_height/2+1), obj_SpaceMove);
            if neighbour {
                dir = directionEnum.YY;
                if abs(diff_y) &gt; MAX_SPEED then diff_y = sign(diff_y)*MAX_SPEED;
                self.y += diff_y;
            }
            sig = sign(diff_y);
        }
        else {
            neighbour = instance_position(self.x + sign(diff_x)*(self.sprite_width/2+1), self.y, obj_SpaceMove);
            //instance_create(self.x + sign(diff_x)*(self.sprite_width/2+1), self.y, obj_Point);
            if neighbour {
                dir = directionEnum.XX;
                if abs(diff_x) &gt; MAX_SPEED then diff_x = sign(diff_x)*MAX_SPEED;
                self.x += diff_x;
            }
            sig = sign(diff_x); 
        }
        mouse_previous_x = mouse_x;
        mouse_previous_y = mouse_y;
    }
}
if dir != directionEnum.NONE {
    if (mouse_previous_x != mouse_x or mouse_previous_y != mouse_y) {
        diff_x = mouse_x - mouse_previous_x;
        diff_y = mouse_y - mouse_previous_y;
        
        var new_neighbour = noone;
        
        if dir == directionEnum.YY {
            
            if sig == sign(diff_y) // for remove the bug #2
            {
                if abs(diff_y) &gt; MAX_SPEED then diff_y = sign(diff_y)*MAX_SPEED;
                  
                new_neighbour = instance_position(self.x, self.y + sign(diff_y)*(self.sprite_height/2+abs(diff_y)), obj_SpaceMove);
                //instance_create(self.x, self.y + sign(diff_y)*(self.sprite_height/2+abs(diff_y)), obj_Point); // draw
                
                if (new_neighbour != neighbour) {
                    if !new_neighbour {
                            
                        if ((sign(diff_y) &lt; 0 and last_fit_y &gt; y) or (sign(diff_y) &gt; 0 and last_fit_y &lt; y)) {
                            self.y = last_fit_y + sign(diff_y)*self.sprite_height;
                        }
                        else if ((sign(diff_y) &lt; 0 and last_fit_y &lt;= y) or (sign(diff_y) &gt; 0 and last_fit_y &gt;= y)) {
                            self.y = last_fit_y;
                        }
                        neighbour = new_neighbour;
                        dir = directionEnum.NONE;
                    }
                    else {
                        self.y += diff_y;
                    }
                }
                else {
                    self.y += diff_y;
                }
            }
        }
        else if dir == directionEnum.XX {
            
            if sig == sign(diff_x) // for remove the bug #2
            {
                if abs(diff_x) &gt; MAX_SPEED then diff_x = sign(diff_x)*MAX_SPEED;
                
                new_neighbour = instance_position(self.x + sign(diff_x)*(self.sprite_width/2+abs(diff_x)), self.y, obj_SpaceMove);
                //instance_create(self.x + sign(diff_x)*(self.sprite_width/2+abs(diff_x)), self.y, obj_Point); // draw
                
                if (new_neighbour != neighbour) {
                    if !new_neighbour {
                        if ((sign(diff_x) &lt; 0 and last_fit_x &gt; x) or (sign(diff_x) &gt; 0 and last_fit_x &lt; x)) {
                            self.x = last_fit_x + sign(diff_x)*self.sprite_width;
                        }
                        else if ((sign(diff_x) &gt; 0 and last_fit_x &gt;= x) or (sign(diff_x) &lt; 0 and last_fit_x &lt;= x)) {
                            self.x = last_fit_x;
                        }
                        neighbour = new_neighbour;
                        dir = directionEnum.NONE;
                    }
                    else {
                        self.x += diff_x;
                    }
                }
                else {
                    self.x += diff_x;
                }
            }
        }
        mouse_previous_x = mouse_x;
        mouse_previous_y = mouse_y;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.mouseActive</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select
/*
 * Select this block for movement
 */
if state == playerstate.STATIC {
    mouse_previous_x = mouse_x;
    mouse_previous_y = mouse_y;
    state = playerstate.MOVING;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite in Room
if room_get_name(room) == "test_2_Room"
    {
    self.sprite_index = spr_Model_1;
    }
if room_get_name(room) == "test_3_Room"
    {
    self.sprite_index = spr_Domino_2;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
