<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT PLAYER

sprite_index = SKIN_DEFAULT;
neighbour = -1;
MAX_SPEED = 12;

enum playerstate {
    STATIC, 
    MOVING, 
    FALLING
    }
state = playerstate.STATIC;

enum directionEnum {
    XX,
    YY,
    NONE
}
dir = directionEnum.NONE;

/* temp coordenates */

mouse_previous_x = -1;
mouse_previous_y = -1;
player_start_x = x;
player_start_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == playerstate.STATIC {
    mouse_previous_x = mouse_x;
    mouse_previous_y = mouse_y;
    player_start_x = x;
    player_start_y = y;
    
    state = playerstate.MOVING;
}

if state == playerstate.MOVING &amp;&amp; dir == directionEnum.NONE {
    if (mouse_previous_x != mouse_x or mouse_previous_y != mouse_y) {
        // see which direction
        diff_x = mouse_x - mouse_previous_x;
        diff_y = mouse_y - mouse_previous_y;
        
        if abs(diff_y) &gt; abs(diff_x) {
            neighbour = instance_position(self.x, self.y + sign(diff_y)*(self.sprite_height/2+1), oBlock);
            show_debug_message("neighbour em YY = " + string(neighbour));
            if neighbour {
                dir = directionEnum.YY;
                if diff_y &gt; MAX_SPEED then diff_y = MAX_SPEED;
                self.y = self.y + diff_y;
            }
        }
        else {
            neighbour = instance_position(self.x + sign(diff_x)*(self.sprite_width/2+1), self.y, oBlock);
            show_debug_message("neighbour em XX = " + string(neighbour));
            if neighbour {
                dir = directionEnum.XX;
                if diff_x &gt; MAX_SPEED then diff_x = MAX_SPEED;
                self.x = self.x + diff_x;
            }
        }
    }
    mouse_previous_x = mouse_x;
    mouse_previous_y = mouse_y;
}

if player_start_x == x &amp;&amp; player_start_y == y {
    dir = directionEnum.NONE;
}

/**
 * Assert start coordenates to a position multiple of 96 
 */
if (x == player_start_x + self.sprite_width or y == player_start_y + self.sprite_height) {
    player_start_x = x;
    player_start_y = y;
    dir = directionEnum.NONE;
}

if dir != directionEnum.NONE {
    if (mouse_previous_x != mouse_x or mouse_previous_y != mouse_y) {
        diff_x = mouse_x - mouse_previous_x;
        diff_y = mouse_y - mouse_previous_y;
            show_debug_message("eu proprio = " + string(self.id));
            show_debug_message("neighbour eh = " + string(neighbour));
        
        if dir == directionEnum.YY {
            if diff_y &gt; MAX_SPEED then diff_y = MAX_SPEED;
            self.y = self.y + diff_y;
            
            // if movement in yy surpass the half of the block player, 
            // then execute automated action of the neighbour block
            if abs(self.y - player_start_y) &gt; self.sprite_height / 2 {
                with neighbour {
                    if state != blockstate.ACTION {
                        state = blockstate.ACTION;
                    }
                }
            }
        }
        else {
            if diff_x &gt; MAX_SPEED then diff_x = MAX_SPEED;
            self.x = self.x + diff_x;
            
            // if movement in xx surpass the half of the block player, 
            // then execute automated action of the neighbour block
            if abs(self.x - player_start_x) &gt; self.sprite_width / 2 {
                with neighbour {
            show_debug_message("eu proprio 'with' x= " + string(self.id));
                    if state != blockstate.ACTION {
                        state = blockstate.ACTION;
                    }
                }
            }
        }
    }
    mouse_previous_x = mouse_x;
    mouse_previous_y = mouse_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
