<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT PLAYER

sprite_index = SKIN_DEFAULT;
neighbour = -1;
MAX_SPEED = 32;

enum playerstate {
    STATIC, 
    MOVING, 
    FALLING
    }
state = playerstate.STATIC;

enum directionEnum {
    XX,
    YY,
    NONE
}
dir = directionEnum.NONE;

/* temp coordenates */

mouse_previous_x = -1;
mouse_previous_y = -1;
last_fit_x = x;
last_fit_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
if state == playerstate.MOVING &amp;&amp; dir == directionEnum.NONE {
    if (mouse_previous_x != mouse_x or mouse_previous_y != mouse_y) {
        // see which direction
        diff_x = mouse_x - mouse_previous_x;
        diff_y = mouse_y - mouse_previous_y;
        
        if abs(diff_y) &gt; abs(diff_x) {
            neighbour = instance_position(self.x, self.y + sign(diff_y)*(self.sprite_height/2+1), oBlock);
            show_debug_message("neighbour em YY = " + string(neighbour));
            if neighbour {
                dir = directionEnum.YY;
                if abs(diff_y) &gt; MAX_SPEED then diff_y = sign(diff_y)*MAX_SPEED;
                self.y += diff_y;
            }
        }
        else {
            neighbour = instance_position(self.x + sign(diff_x)*(self.sprite_width/2+1), self.y, oBlock);
            instance_create(self.x + sign(diff_x)*(self.sprite_width/2+1), self.y, obj_Point);
            if neighbour {
                show_debug_message("neighbour em XX = " + string(neighbour));
                show_debug_message("neighbour_XX = " + string(neighbour) + " x = " + string(neighbour.x) + " y = " + string(neighbour.y));
                dir = directionEnum.XX;
                if abs(diff_x) &gt; MAX_SPEED then diff_x = sign(diff_x)*MAX_SPEED;
                self.x += diff_x;
            }
        }
        mouse_previous_x = mouse_x;
        mouse_previous_y = mouse_y;
    }
}
if dir != directionEnum.NONE {
    if (mouse_previous_x != mouse_x or mouse_previous_y != mouse_y) {
        diff_x = mouse_x - mouse_previous_x;
        diff_y = mouse_y - mouse_previous_y;
        
        var new_neighbour = noone;
        
        if dir == directionEnum.YY {
            if abs(diff_y) &gt; MAX_SPEED then diff_y = sign(diff_y)*MAX_SPEED;
            
            
            
            //if abs(self.y - last_fit_y) &gt; self.sprite_height / 2 {       
                new_neighbour = instance_position(self.x, self.y + sign(diff_y)*(self.sprite_height/2+abs(diff_y)), oBlock);
                instance_create(self.x, self.y + sign(diff_y)*(self.sprite_height/2+abs(diff_y)), obj_Point); // draw
                
                if (new_neighbour != neighbour) {
                    if !new_neighbour {
                        neighbour = new_neighbour;
                        dir = directionEnum.NONE;
                        
                        if ((sign(diff_y) &lt; 0 and last_fit_y &gt; y) or (sign(diff_y) &gt; 0 and last_fit_y &lt; y)) {
                            self.y = last_fit_y + sign(diff_y)*self.sprite_height;
                        }
                        else if ((sign(diff_y) &lt; 0 and last_fit_y &lt;= y) or (sign(diff_y) &gt; 0 and last_fit_y &gt;= y)) {
                            self.y = last_fit_y;
                        }
                    }
                    else {
                        self.y += diff_y;
                    }
                }
                else {
                    self.y += diff_y;
                }
            //}
        }
        else if dir == directionEnum.XX {
            if abs(diff_x) &gt; MAX_SPEED 
            {
                show_debug_message("!!!! diff_x = " + string(diff_x) + " nova diff é = " + string(sign(diff_x)*MAX_SPEED));
                diff_x = sign(diff_x)*MAX_SPEED;
            }
            
            //if abs(self.x - last_fit_x) &gt; self.sprite_width / 2 {
                new_neighbour = instance_position(self.x + sign(diff_x)*(self.sprite_width/2+abs(diff_x)), self.y, oBlock);
                show_debug_message("new_neighbour = " + string(new_neighbour));
                instance_create(self.x + sign(diff_x)*(self.sprite_width/2+abs(diff_x)), self.y, obj_Point); // draw
                
                if (new_neighbour != neighbour) {
                    if !new_neighbour {
                        neighbour = new_neighbour;
                        dir = directionEnum.NONE;
                        
                        if ((sign(diff_x) &lt; 0 and last_fit_x &gt; x) or (sign(diff_x) &gt; 0 and last_fit_x &lt; x)) {
                            show_debug_message("AVANÇA! &gt; (sign(diff_x) &lt; 0 and last_fit_x &gt; x) " + string(sign(diff_x) &lt; 0 and last_fit_x &gt; x) + " (sign(diff_x) &gt; 0 and last_fit_x &lt; x) " + string(sign(diff_x) &gt; 0 and last_fit_x &lt; x));
                            self.x = last_fit_x + sign(diff_x)*self.sprite_width;
                        }
                        else if ((sign(diff_x) &gt; 0 and last_fit_x &gt;= x) or (sign(diff_x) &lt; 0 and last_fit_x &lt;= x)) {
                            show_debug_message("FICA! &gt; (sign(diff_x) &gt; 0 and last_fit_x &gt;= x) " + string(sign(diff_x) &gt; 0 and last_fit_x &gt;= x) + " (sign(diff_x) &lt; 0 and last_fit_x &lt;= x) " + string(sign(diff_x) &lt; 0 and last_fit_x &lt;= x));
                            self.x = last_fit_x;
                        }
                    }
                    else {
                        self.x += diff_x;
                    }
                }
                else {
                    self.x += diff_x;
                }
            //}
        }
        mouse_previous_x = mouse_x;
        mouse_previous_y = mouse_y;
    }
}

/**
 * Assert last fit coordenates to a position multiple of 96 
 * where the player can fit (the last where he passed)
 */
if x &gt;= last_fit_x + self.sprite_width {
    show_debug_message(" X = " + string(x));
    show_debug_message("+last_fit_x changed form = " + string(last_fit_x));
    last_fit_x += self.sprite_width;
    show_debug_message(" to " + string(last_fit_x));
    }
if x &lt;= last_fit_x - self.sprite_width {
    show_debug_message(" X = " + string(x));
    show_debug_message("-last_fit_x changed form = " + string(last_fit_x));
    last_fit_x -= self.sprite_width;
    show_debug_message(" to " + string(last_fit_x));
    }
if y &gt;= last_fit_y + self.sprite_height {
    show_debug_message("+last_fit_y changed form = " + string(last_fit_y) + " to " + string(last_fit_y + self.sprite_height));
    last_fit_y += self.sprite_height;
    }
if y &lt;= last_fit_y - self.sprite_height {
    show_debug_message("-last_fit_y changed form = " + string(last_fit_y) + " to " + string(last_fit_y - self.sprite_height));
    last_fit_y -= self.sprite_height;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fit
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select
/*
 * Select this block for movement
 */
if state == playerstate.STATIC {
    mouse_previous_x = mouse_x;
    mouse_previous_y = mouse_y;
    
    state = playerstate.MOVING;
    show_debug_message("PRESSIONADO!!!")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
