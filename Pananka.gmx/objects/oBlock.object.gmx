<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_SpaceMove</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT

event_inherited();

autoDestroy = false;
inspectedColor = false;
matched = false;


dvalue = 0;

changeAlpha = false;
alpha = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Solid &amp;&amp; Unsolid

if (global.gravity__ == false) {
    self.solid = false;
}
else {
    self.solid = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.gravity__</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gravity

if (place_free(x, y+1)) {
        vspeed += 2;
    }
    else {
        vspeed = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>checkupOnRoomSprites</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>inspectedColor</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inspect Neighbours Color

var rightBlock = noone;
var leftBlock = noone;
var bottomBlock = noone;
var topBlock = noone;

rightBlock = instance_position(self.x + self.sprite_width, self.y, oBlock);
leftBlock = instance_position(self.x - self.sprite_width, self.y, oBlock);
bottomBlock = instance_position(self.x, self.y + self.sprite_height, oBlock);
topBlock = instance_position(self.x, self.y - self.sprite_height, oBlock);

if ( rightBlock )
{
    //instance_create(rightBlock.x, rightBlock.y, obj_PointRed);
    if ( self.sprite_index == spr_Model_2 )
    {
        if (rightBlock.sprite_index == spr_Model_4) {
            global.hasBlocksSameColor = true;
            //self.autoDestroy = true;
            self.matched = true;
            rightBlock.matched = true;
            //instance_create(x,y,obj_Point);
            //instance_create(rightBlock.x, rightBlock.y, obj_PointRed);
        }
    }
    else if ( isDomino(self.id) )
    {
        if ( isDomino(rightBlock) ) {
            if (self.dvalue + rightBlock.dvalue) &gt;= 8 {
                global.hasBlocksSameColor = true;
                self.matched = true;
                rightBlock.matched = true;
                //instance_create(x,y,obj_Point);   
                //instance_create(rightBlock.x, rightBlock.y, obj_PointRed);         
            }
        }
    }
}
if ( leftBlock )
{
    //instance_create(leftBlock.x, leftBlock.y, obj_PointRed);
    if ( self.sprite_index == spr_Model_4 )
    {
        if (leftBlock.sprite_index == spr_Model_2) {
            global.hasBlocksSameColor = true;
            //self.autoDestroy = true;
            self.matched = true;
            leftBlock.matched = true;
            //instance_create(x,y,obj_Point);
            //instance_create(leftBlock.x, leftBlock.y, obj_PointRed);
        }
    }
    else if ( isDomino(self.id) )
    {
        if ( isDomino(leftBlock) ) {
            if (self.dvalue + leftBlock.dvalue) &gt;= 8 {
                global.hasBlocksSameColor = true;
                self.matched = true;
                leftBlock.matched = true;
                //instance_create(x,y,obj_Point);   
                //instance_create(leftBlock.x, leftBlock.y, obj_PointRed);         
            }
        }
    }
}
if ( bottomBlock )
{
    //instance_create(bottomBlock.x, bottomBlock.y, obj_PointRed);

    if ( self.sprite_index == spr_Model_3 )
    {
        if (bottomBlock.sprite_index == spr_Model_1) {
            global.hasBlocksSameColor = true;
            //self.autoDestroy = true;
            self.matched = true;
            bottomBlock.matched = true;
            //instance_create(x,y,obj_Point);
            //instance_create(bottomBlock.x, bottomBlock.y, obj_PointRed);
        }
    }
    else if ( isDomino(self.id) )
    {
        if ( isDomino(bottomBlock) ) {
            if (self.dvalue + bottomBlock.dvalue) &gt;= 8 {
                global.hasBlocksSameColor = true;
                self.matched = true;
                bottomBlock.matched = true;
                //instance_create(x,y,obj_Point);       
                //instance_create(bottomBlock.x, bottomBlock.y, obj_PointRed);     
            }
        }
    }
}
if ( topBlock )
{
    //instance_create(topBlock.x, topBlock.y, obj_PointRed);
    if ( self.sprite_index == spr_Model_1 )
    {
        if (topBlock.sprite_index == spr_Model_3) {
            global.hasBlocksSameColor = true;
            //self.autoDestroy = true;
            self.matched = true;
            topBlock.matched = true;
            //instance_create(x,y,obj_Point);
            //instance_create(topBlock.x, topBlock.y, obj_PointRed);
        }
    }
    else if ( isDomino(self.id) )
    {
        if ( isDomino(topBlock) ) {
            if (self.dvalue + topBlock.dvalue) &gt;= 8 {
                global.hasBlocksSameColor = true;
                self.matched = true;
                topBlock.matched = true;
                //instance_create(x,y,obj_Point);    
                //instance_create(topBlock.x, topBlock.y, obj_PointRed);        
            }
        }
    }
}

inspectedColor = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AutoDestroy
if ( self.autoDestroy ) { 
    if ( !global.icarusCreated )
    {
        var rand = irandom_range(1, 10);
        show_debug_message("rand = " + string(rand));
        if (rand &gt;= 4) {
            // there's 50% chance of this happend
            var icarus = instance_create(x,y,obj_Icarus);
            icarus.depth = self.depth - 1;
            global.icarusCreated = true;
        }
    }
    instance_destroy(); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Brick">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if (global.gravity__)
{
move_contact_solid(270,0);  
vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if (global.gravity__)
{
move_contact_solid(270,0);  
vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawings

if changeAlpha {
    draw_sprite_ext(self.sprite_index,0,x,y,1,1,0,-1,alpha);
}
else {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
